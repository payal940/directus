(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0a446a"],{"066d":function(e,n,t){"use strict";t.r(n),n["default"]='# Environment Variables\n\n> Each Directus project supports a number of environment variables for configuration. These variables are added to the\n> `/api/.env` file, with an example file at `/api/example.env` for easier boilerplate setup.\n\n## General\n\n### `PORT`\n\nWhat port to run the API under.<br>**Default: `8055`**\n\n### `PUBLIC_URL`\n\nURL where your API can be reached on the web.<br>**Default: `/`**\n\n### `LOG_LEVEL`\n\nWhat level of detail to log. One of `fatal`, `error`, `warn`, `info`, `debug`, `trace` or `silent`.<br>**Default:\n`info`**\n\n### `LOG_STYLE`\n\nRender the logs human readable (pretty) or as JSON. One of `pretty`, `raw`.<br>**Default: `pretty`**\n\n## Database\n\n### `DB_CLIENT`\n\nWhat database client to use. One of `pg` or `postgres`, `mysql`, `mysql2`, `oracledb`, `mssql`, or `sqlite3`. For all\ndatabase clients except SQLite, you will also need to configure the following variables:\n\n### `DB_HOST`\n\nDatabase host. Required when using `pg`, `mysql`, `mysql2`, `oracledb`, or `mssql`.\n\n### `DB_PORT`\n\nDatabase port. Required when using `pg`, `mysql`, `mysql2`, `oracledb`, or `mssql`.\n\n### `DB_DATABASE`\n\nDatabase name. Required when using `pg`, `mysql`, `mysql2`, `oracledb`, or `mssql`.\n\n### `DB_USER`\n\nDatabase user. Required when using `pg`, `mysql`, `mysql2`, `oracledb`, or `mssql`.\n\n### `DB_PASSWORD`\n\nDatabase user\'s password. Required when using `pg`, `mysql`, `mysql2`, `oracledb`, or `mssql`.\n\n### `DB_FILENAME` (SQLite Only)\n\nWhere to read/write the SQLite database. Required when using `sqlite3`.\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Additional Database Variables\nAll `DB_*` environment variables are passed to the `connection`\nconfiguration of a [`Knex` instance](http://knexjs.org). Based on your project\'s needs, you can\nextend the `DB_*` environment variables with any config you need to pass to the database instance.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### `DB_CONNECTION_STRING` (Postgres Only)\n\nWhen using Postgres, you can submit a connection string instead of individual properties. Using this will ignore any of\nthe other connection settings.\n\n## Security\n\n### `KEY`\n\nUnique identifier for the project.\n\n### `SECRET`\n\nSecret string for the project. Generated on installation.\n\n### `ACCESS_TOKEN_TTL`\n\nThe duration that the access token is valid.<br>**Default: `15m`**\n\n### `REFRESH_TOKEN_TTL`\n\nThe duration that the refresh token is valid, and also how long users stay logged-in to the App.<br>**Default: `7d`**\n\n### `REFRESH_TOKEN_COOKIE_SECURE`\n\nWhether or not to use a secure cookie for the refresh token in cookie mode.<br>**Default: `false`**\n\n### `REFRESH_TOKEN_COOKIE_SAME_SITE`\n\nValue for `sameSite` in the refresh token cookie when in cookie mode.<br>**Default: `lax`**\n\n## CORS\n\n### `CORS_ENABLED`\n\nWhether or not to enable the CORS headers.<br>**Default: `true`**\n\n### `CORS_ORIGIN`\n\nValue for the `Access-Control-Allow-Origin` header. Possible values:\n\n- `true` - reflect the Origin header\n- String - set the origin to a specific domain\n- CSV - multiple domains\n\n### `CORS_METHODS`\n\nValue for the `Access-Control-Allow-Methods` header.<br>**Default: `GET,POST,PATCH,DELETE`**\n\n### `CORS_ALLOWED_HEADERS`\n\nValue for the `Access-Control-Allow-Headers` header.<br>**Default: `Content-Type,Authorization`**\n\n### `CORS_EXPOSED_HEADERS`\n\nValue for the `Access-Control-Expose-Headers` header.<br>**Default: `Content-Range`**\n\n### `CORS_CREDENTIALS`\n\nWhether or not to send the `Access-Control-Allow-Credentials` header.<br>**Default: `true`**\n\n### `CORS_MAX_AGE`\n\nValue for the `Access-Control-Max-Age` header.<br>**Default: `18000`**\n\n## Rate Limiting\n\n### `RATE_LIMITER_ENABLED`\n\nWhether or not to enable rate limiting on the API.<br>**Default: `false`**\n\n### `RATE_LIMITER_POINTS`\n\nThe amount of allowed hits per duration.<br>**Default: `50`**\n\n### `RATE_LIMITER_DURATION`\n\nThe time window in seconds in which the points are counted.<br>**Default: `1`**\n\n### `RATE_LIMITER_STORE`\n\nWhere to store the rate limiter counts. Either `memory`, `redis`, or `memcache`. Based on the rate limiter used, you\nmust also provide the following configurations.<br>**Default: `memory`**\n\n- **Memory**\n  - No additional configuration required\n- **Redis**\n  - **`RATE_LIMITER_REDIS`** — Redis connection string\n    - eg: `redis://:authpassword@127.0.0.1:6380/4`\n  - Alternatively, you can enter individual connection parameters:\n    - **`RATE_LIMITER_REDIS_HOST`**\n    - **`RATE_LIMITER_REDIS_PORT`**\n    - **`RATE_LIMITER_REDIS_PASSWORD`**\n    - **`RATE_LIMITER_REDIS_DB`**\n- **Memcache**\n  - **`RATE_LIMITER_MEMCACHE`** — Location of your memcache instance\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Additional Rate Limiter Variables All `RATE_LIMITER_*` variables are passed directly to a\n`rate-limiter-flexible` instance. Depending on your project\'s needs, you can extend the above\nenvironment variables to configure any of\n[the `rate-limiter-flexible` options](https://github.com/animir/node-rate-limiter-flexible/wiki/Options).\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n## Cache\n\n### `CACHE_ENABLED`\n\nWhether or not caching is enabled.<br>**Default: `false`**\n\n### `CACHE_TTL`\n\nHow long the cache is persisted.<br>**Default: `30m`**\n\n\x3c!-- prettier-ignore-start --\x3e\n::: warning Forced Flush\nRegardless of TTL, the cache is always flushed for every create, update, and\ndelete action.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### `CACHE_NAMESPACE`\n\nHow to scope the cache data.<br>**Default: `directus-cache`**\n\n### `CACHE_STORE`\n\nWhere to store the cache data. Either `memory`, `redis`, or `memcache`. Based on the cache used, you must also provide\nthe following configurations.<br>**Default: `memory`**\n\n- **Memory**\n  - No additional configuration required\n- **Redis**\n  - **`CACHE_REDIS`** — Redis connection string\n    - eg: `redis://:authpassword@127.0.0.1:6380/4`\n  - Alternatively, you can enter individual connection parameters:\n    - **`CACHE_REDIS_HOST`**\n    - **`CACHE_REDIS_PORT`**\n    - **`CACHE_REDIS_PASSWORD`**\n    - **`CACHE_REDIS_DB`**\n- **Memcache**\n  - **`CACHE_MEMCACHE`** — Location of your memcache instance\n\n### `CACHE_AUTO_PURGE`\n\nControls whether or not the cache will be auto-purged on create/update/delete actions within the system. Enabling this\nfeature means that the API will remain real-time, while caching subsequent read calls when no changes have happened.\n**Note**: enabling auto-purge will remove the `Cache-Control` header, as the cache can be invalidated at any point.\n\n### `ASSETS_CACHE_TTL`\n\nHow long assets will be cached for in the browser. Sets the `max-age` value of the `Cache-Control` header.\n\n## File Storage\n\n### `STORAGE_LOCATIONS`\n\nA CSV of storage locations (eg: `local,digitalocean,amazon`) to use. You can use any names you\'d like for these keys,\nbut each must have a matching `<LOCATION>` configuration.<br>**Default: `local`**\n\nFor each of the storage locations listed, you must provide the following configuration:\n\n- **`STORAGE_<LOCATION>_PUBLIC_URL`** — Location on the internet where the files are accessible\n- **`STORAGE_<LOCATION>_DRIVER`** — Which driver to use, either `local`, `s3`, or `gcs`\n\nBased on your configured driver, you must also provide the following configurations.\n\n- **Local**\n  - `STORAGE_<LOCATION>_ROOT` — Where to store the files on disk\n- **S3**\n  - **`STORAGE_<LOCATION>_KEY`** — User key\n  - **`STORAGE_<LOCATION>_SECRET`** — User secret\n  - **`STORAGE_<LOCATION>_ENDPOINT`** — S3 Endpoint\n  - **`STORAGE_<LOCATION>_BUCKET`** — S3 Bucket\n  - **`STORAGE_<LOCATION>_REGION`** — S3 Region\n- **Google Cloud**\n  - **`STORAGE_<LOCATION>_KEY_FILENAME`** — Path to key file on disk\n  - **`STORAGE_<LOCATION>_BUCKET`** — Google Cloud Storage bucket\n\n## oAuth\n\n### `OAUTH_PROVIDERS`\n\nCSV of oAuth providers you want to use. For each of the oAuth providers you list, you must also provide \na number of extra variables. The exact configuration is going to be provider dependant, so please check the \nprovider\'s reference documentation.\n\n- **`OAUTH_<PROVIDER>_KEY`** — oAuth key (a.k.a. application id) for the external service.\n- **`OAUTH_<PROVIDER>_SECRET`** — oAuth secret for the external service.\n- **`OAUTH_<PROVIDER>_SCOPE`** — A white-space separated list of privileges directus should ask for. \nA very common value is: `openid email`.\n- **`OAUTH_<PROVIDER>_ACCESS_URL`** — The provider\'s oAuth *authorization endpoint*. \n- **`OAUTH_<PROVIDER>_AUTHORIZE_URL`** — The provider\'s oAuth *token endpoint*.\n\n**`OAUTH_<PROVIDER>_ACCESS_URL`** and **`OAUTH_<PROVIDER>_AUTHORIZE_URL`** will be only necessary\nto access data from a particular tenant (e.g. a particular instance/domain of G-Suite or MS Office 365).\n\nFor a complete list of supported providers please see the [grant library](https://www.npmjs.com/package/grant).\n\n#### oAuth And Reverse Proxy\n\nIn case you are running Directus behind a reverse proxy (e.g. for implementing SSL/TLS) you also need to pay\nattention to the configation of the **`PUBLIC_URL`**, or the oAuth provider will be try to reach Directus on \nthe its private URL. \n\nMore specifically, the **`PUBLIC_URL`** variable is used to construct the oAuth request\'s *redirection endpoint*.\n\n#### oAuth Example\n\nAssuming that your providers are Google and Microsoft, that Directus is running behind a proxy, and that Microsoft\'s \nlogin is not multi-tenant, then you would need to set the following environment variables:\n\n```\nOAUTH_PROVIDERS ="google microsoft"\n\nOAUTH_GOOGLE_KEY = "<google_application_id>"\nOAUTH_GOOGLE_SECRET=  "<google_application_secret_key>"\nOAUTH_GOOGLE_SCOPE="openid email"\n\nOAUTH_MICROSOFT_KEY = "<microsoft_application_id>"\nOAUTH_MICROSOFT_SECRET = "<microsoft_application_secret_key>"\nOAUTH_MICROSOFT_SCOPE = "openid email"\nOAUTH_MICROSOFT_AUTHORIZE_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/authorize"\nOAUTH_MICROSOFT_ACCESS_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/token"\n\nPUBLIC_URL = "<public_url_of_directus_instance>"\n```\n\n## Extensions\n\n### `EXTENSIONS_PATH`\n\nPath to your local extensions folder.<br>**Default: `./extensions`**\n\n## Email\n\n### `EMAIL_FROM`\n\nEmail address from which emails are sent.<br>**Default: `no-reply@directus.io`**\n\n### `EMAIL_TRANSPORT`\n\nWhat to use to send emails. One of `sendmail`, `smtp`. Based on the transport used, you must also provide the following\nconfigurations.<br>**Default: `sendmail`**\n\n- **Sendmail** (`sendmail`)\n  - **`EMAIL_SENDMAIL_NEW_LINE`** — What new line style to use in sendmail. **Default: `unix`**\n  - **`EMAIL_SENDMAIL_PATH`** — Path to your sendmail executable. **Default: `/usr/sbin/sendmail`**\n- **SMTP** (`smtp`)\n  - **`EMAIL_SMTP_HOST`** — SMTP Host\n  - **`EMAIL_SMTP_PORT`** — SMTP Port\n  - **`EMAIL_SMTP_USER`** — SMTP User\n  - **`EMAIL_SMTP_PASSWORD`** — SMTP Password\n  - **`EMAIL_SMTP_POOL`** — Use SMTP pooling\n  - **`EMAIL_SMTP_SECURE`** — Enable TLS\n\n## Misc.\n\nIf you\'re relying on Docker and/or the `directus bootstrap` CLI command, you can pass the following two environment\nvariables to automatically configure the first user:\n\n### `ADMIN_EMAIL`\n\nThe email address of the first user that\'s automatically created when using `directus bootstrap`. Defaults to\n`admin@example.com`\n\n### `ADMIN_PASSWORD`\n\nThe password of the first user that\'s automatically created when using `directus bootstrap`. Defaults to a random string\nof 12 characters.\n'}}]);