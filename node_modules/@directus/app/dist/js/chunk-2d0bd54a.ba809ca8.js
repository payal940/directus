(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0bd54a"],{"2c14":function(e,n,t){"use strict";t.r(n),n["default"]="# Create a Custom Interface\n\n> Custom interfaces allow you to create new ways of viewing or interacting with data on the Item\n> Detail page.\n\n## 1. Setup the Boilerplate\n\nEvery interface is a standalone \"package\" that contains at least a metadata file and a Vue\ncomponent. We recommend using the following file structure:\n\n```\nsrc/\n\tindex.js\n\tinterface.vue\n```\n\n### src/index.js\n\n```js\nimport InterfaceComponent from './interface.vue';\n\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\tdescription: 'This is my custom interface!',\n\ticon: 'box',\n\tcomponent: InterfaceComponent,\n\ttypes: ['string'],\n};\n```\n\n-   `id` — The unique key for this interface. It is good practice to scope proprietary interfaces\n    with an author prefix.\n-   `name` — The human-readable name for this interface.\n-   `description` — A short description (<80 characters) of this interface shown in the App.\n-   `icon` — An icon name from the material icon set, or the extended list of Directus custom icons.\n-   `component` — A reference to your Vue component.\n-   `types` — A CSV of supported [types](/concepts/platform-overview#types).\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip\nSee [the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/interfaces/types.ts#L5-L18) for more info on what can go into this object.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### src/interface.vue\n\n```vue\n<template>\n\t<div>My Custom Interface</div>\n</template>\n\n<script>\nexport default {};\n<\/script>\n```\n\n#### Available Props\n\n-   `value` — The value of the parent field.\n-   `width` — The layout width of the parent field. Either `half`, `half-left`, `half-right`,\n    `full`, or `fill`.\n-   `type` — The type of the parent field.\n-   `collection` — The collection name of the parent field.\n-   `field` — The key of the parent field.\n-   `primary-key` — The current item's primary key.\n\n## 2. Install Dependencies and Configure the Buildchain\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom interface's Vue component must first be bundled into a\nsingle `index.js` file. We recommend bundling your code using Rollup. To install this and the other\ndevelopment dependencies, run this command:\n\n```bash\nnpm i -D rollup rollup-plugin-commonjs rollup-plugin-node-resolve rollup-plugin-terser rollup-plugin-vue@5.0.0 @vue/compiler-sfc vue-template-compiler\n```\n\nYou can then use the following Rollup configuration within `rollup.config.js`:\n\n```js\nimport { terser } from 'rollup-plugin-terser';\nimport resolve from 'rollup-plugin-node-resolve';\nimport commonjs from 'rollup-plugin-commonjs';\nimport vue from 'rollup-plugin-vue';\n\nexport default {\n\tinput: 'src/index.js',\n\toutput: {\n\t\tformat: 'es',\n\t\tfile: 'dist/index.js',\n\t},\n\tplugins: [terser(), resolve(), commonjs(), vue()],\n};\n```\n\n## 3. Develop your Custom Interface\n\nThe interface itself is simply a Vue component, which provides an blank canvas for creating anything\nyou need.\n\n## 4. Build and Deploy\n\nTo build the interface for use within Directus, run:\n\n```bash\nnpx rollup -c\n```\n\nFinally, move the output from your interface's `dist` folder into your project's\n`/extensions/interfaces` folder. Keep in mind that the extensions directory is configurable within\nyour env file, and may be located elsewhere.\n"}}]);