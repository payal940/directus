(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e6693"],{9941:function(e,n,t){"use strict";t.r(n),n["default"]='# Platform Overview\n\n> The Directus platform is primarily comprised of an API and App, working in concert to "mirror" the schema and content\n> of your SQL database.\n\n## Database Mirroring\n\nInstead of using a predefined "one-size-fits-all" data model to store your content, Directus "mirrors" your actual SQL\ndatabase in real-time. The principle is akin to a database client (eg: _phpMyAdmin_), but includes far more advanced\ntools, and is safe and intuitive enough for non-technical users. This approach has many unique advantages:\n\n- A custom SQL database schema, tailored to your exact requirements\n- Significant performance improvements through optimizations and indexing\n- Complete transparency, portability, and security for your data\n- Direct database access and the full power of raw/complex SQL queries\n- Allows importing existing databases, unaltered and without any migrations\n\n## Directus API\n\nThe Directus API uses _Database Mirroring_ to dynamically generate REST endpoints and a GraphQL schema based on the\nconnected database\'s architecture. It is written in [Node.js](https://nodejs.org) and uses database abstraction to\nsupport most [SQL database vendors](/guides/installation#databases).\n\n### Relevant Docs\n\n- [API Reference](/reference/api/introduction)\n- [API Custom Endpoints](/concepts/api-extensions)\n\n## Directus App\n\nThe Directus App is decoupled from, and powered by, the Directus API. It provides a way for both technical admins and\nnon-technical users to view and manage content of the connected database. It is written in [Vue.js](https://vuejs.org)\nv3, is completely modular, and is highly customizable.\n\n### Relevant Docs\n\n- [App Overview](/concepts/app-overview)\n- [App Extensions](/concepts/app-extensions)\n\n## Projects & Environments\n\nA Project is a complete instance of Directus. Each project primarily represents a database, but also includes a\nconfiguration file and any related asset storage. This modular approach means you can also create different environments\n(eg: Dev, Staging, Prod) by simply creating additional project instances.\n\n\x3c!-- ::: tip Migrating Environments\nDirectus includes [Export](#), [Import](#), [Backup](#), and [Restore](#) features to assist with custom migration workflows between environments. \nYou can also roll your own process by copying the database and assets between environments, either manually or via an automated script.\n\n@TODO Reference Schema Revisions\n::: --\x3e\n\n## Collections\n\nA Collection is a grouping of similar Items. Each collection represents a table in your database. Directus automatically\nuses a built-in [title formatter](/concepts/app-extensions) to display your database table names prettified, and you can\nuse [translations](/concepts/data-model) to completely rename them if needed.\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Usage\nCollections can be organized in any way that is appropriate for your project. You can\narchitect them platform-specific (eg: _pages_ of a website), or in a more platform-agnostic way (eg:\nraw _customers_ of your business). While there\'s no right or wrong way to structure your data-model,\nwe recommend keeping your data as agnostic as possible so it is easier to repurpose in the future.\nIn short, **learn to see your data as its own asset â€” not only through the lens of your immediate\nproject needs**.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### Relevant Guides\n\n- [Creating a Collection](/guides/collections#creating-a-collection)\n- [Deleting a Collection](/guides/collections#deleting-a-collection)\n\n## Presets\n\nPresets store the exact state of a [collection detail](/concepts/app-overview) page. These are used to set layout\ndefaults for a user, or to define bookmarks that can be used to quickly recall specific datasets.\n\n### Relevant Guides\n\n- [Creating a Preset](/guides/presets#creating-a-preset)\n- [Deleting a Preset](/guides/presets#deleting-a-preset)\n\n## Fields\n\nA Field is a specific type of value within a Collection. Each field represents a database column. Directus automatically\nuses a built-in [title formatter](/concepts/app-extensions#title-formatter) to display your database column names\nprettified, and you can use [translations](/guides/fields) to completely rename them if needed.\n\nEach field also mirrors other characteristics from the column, including its `type`, `default`, `length`, `allow_null`,\netc.\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Usage\nYou might have `title`, `body`, `author`, and `date_published` fields within an\n`articles` collection.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Aliases\nNot all fields in Directus map directly to an actual database column within their\ntable. Some relational fields, like One-to-Many (O2M) and Many-to-Many (M2M), represent data that is\nstored in different tables. Other fields are only for presentation and don\'t save data at all, such\nas a divider. These are called "alias" fields.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Relational Fields\nFields that reference other items (in the same collection or different)\nare called relational fields. Linking or connecting data relationally is an immensely powerful\nfeature of relational databases and SQL queries.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### Relevant Guides\n\n- [Creating a Standard Field](/guides/field-types/standard-field)\n- [Creating a Presentation Field](/guides/field-types/presentation-field)\n- [Creating a Many-to-One Field](/guides/field-types/many-to-one-field)\n- [Creating a One-to-Many Field](/guides/field-types/one-to-many-field)\n- [Creating a Many-to-Many Field](/guides/field-types/many-to-many-field)\n- [Creating a Many-to-Any Field](/guides/field-types/many-to-any-field)\n- [Creating Translated Fields](/guides/field-types/translated-fields)\n- [Duplicating Fields](/guides/fields#duplicating-a-field)\n- [Adjusting Field Layout](/guides/fields#adjusting-field-layout)\n- [Deleting Fields](/guides/fields#deleting-a-field)\n\n## Types\n\nDirectus has built-in database abstraction for managing all SQL database vendors. However, each of those vendors has a\ndifferent list of supported column datatypes. To standardize all of these differences, Directus has a single superset of\ntypes that each map to the more specific vendor ones.\n\n- String\n- Text\n- Boolean\n- Integer\n- Big Integer\n- Float\n- Decimal\n- Timestamp\n- DateTime\n- Date\n- Time\n- JSON\n- CSV\n- UUID\n\n@TODO confirm\n\n## Items\n\nAn Item is an object containing the field values within a Collection. Each item represents a database record. Similar to\na "row" within a spreadsheet.\n\n### Relevant Guides\n\n- [Creating an Item](/guides/items#creating-an-item)\n- [Archiving an Item](/guides/items#archiving-an-item)\n- [Reordering Items](/guides/items#reordering-items)\n- [Deleting an Item](/guides/items#deleting-an-item)\n'}}]);