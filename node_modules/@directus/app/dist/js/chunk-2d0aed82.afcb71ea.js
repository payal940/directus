(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0aed82"],{"0c92":function(e,n,t){"use strict";t.r(n),n["default"]='# Files & Thumbnails\n\n> Directus offers a full-featured Digital Asset Management (DAM) system, multiple storage adapters,\n> private file permissions, and on-demand image thumbnail generation.\n\n## Uploading a File\n\n@TODO\n\n## Accessing an Original File\n\nThe location of your actual file originals is based on the project\'s configuration, but you can\nconsistently access them via the API using the following URL.\n\n```\nexample.com/assets/<file-id>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4\n```\n\n![Original File](../assets/original.jpg) _Original File Used Below — 602KB and 1800x1200_\n\n\x3c!-- prettier-ignore-start --\x3e\n::: warning Direct File Access\nWhile you may _technically_ be able to access your original files\nwithin their actual filesystem directory (eg: `/uploads/<filename_disk>` for the default local\nstorage configuration), it is recommended that you always use the Directus API. This is the only way\nthat you can take advantage of file permissions and other built-in features.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n## Creating Thumbnail Presets\n\n1. Navigate to **Settings > Project Settings**\n2. Scroll to the **Storage Asset Presets** field\n3. Click **Add a New Item**\n4. Enter a unique **Key** for the preset\n5. Enter the **Fit**, **Width**, **Height**, and **Quality** for the preset\n6. Click the **Save** action button in the header\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip Storage Asset Transform\nThe **Storage Asset Transform** can be used in conjunction with the\npresets to force an allow-list or completely disable the thumbnailing system. The options for this\nare:\n\n-   **All** — Any valid thumbnail request will be returned\n-   **None** — No thumbnails will be returned, not even presets\n-   **Presets Only** — Only valid Storage Asset Presets will be returned\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n## Requesting a Thumbnail\n\nFetching thumbnails is as easy as adding query parameters to the original file\'s URL. If a requested\nthumbnail doesn\'t yet exist, it is dynamically generated and immediately returned. When requesting a\nthumbnail, the following parameters are all required.\n\n-   **`fit`** — The **fit** of the thumbnail while always preserving the aspect ratio, can be any of\n    the following options:\n    -   `cover` — Covers both width/height by cropping/clipping to fit\n    -   `contain` — Contain within both width/height using "letterboxing" as needed\n    -   `inside` — Resize to be as large as possible, ensuring dimensions are less than or equal to\n        the requested width and height\n    -   `outside` — Resize to be as small as possible, ensuring dimensions are greater than or equal\n        to the requested width and height\n-   **`width`** — The **width** of the thumbnail in pixels\n-   **`height`** — The **height** of the thumbnail in pixels\n-   **`quality`** — The **quality** of the thumbnail (`0` to `100`)\n-   **`withoutEnlargement`** — Disable image up-scaling\n-   **`download`** — Add `Content-Disposition` header and force browser to download file\n\n```\nexample.com/assets/<file-id>?fit=<fit>&width=<width>&height=<height>&quality=<quality>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4?fit=cover&width=200&height=200&quality=80\n```\n\nAlternatively, you can reference a specific thumbnail by its preset key.\n\n-   **`key`** — This **key** of the\n    [Storage Asset Preset](/guides/files#creating-thumbnail-presets), a shortcut for the above\n    parameters\n\n```\nexample.com/assets/<file-id>?key=<preset-key>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4?key=card\n```\n\n### Cover vs Contain\n\nFor easier comparison, both of the examples below were requested at `200` width, `200` height, and\n`75` quality. The `cover` thumbnail forces the dimensions, trimming the outside edges as needed. The\n`contain` thumbnail always maintains its aspect ratio, shrinking the image to fit _within_ the\ndimensions and adding "letterboxing" as needed.\n\n| Cover                                                       | Contain                                                         |\n| ----------------------------------------------------------- | --------------------------------------------------------------- |\n| ![Cover](../assets/200-200-cover-75.jpg)<br>_8KB • 200x200_ | ![Contain](../assets/200-200-contain-75.jpg)<br>_6KB • 200x133_ |\n\n\x3c!-- prettier-ignore-start --\x3e\n::: Aspect Ratio\nImages are never stretched or distorted even when changing the aspect ratio.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### Quality vs Filesize\n\nThe quality parameter can be any integer from `0-100`. Qualities closer to `0` have lower filesizes,\nbut also poor image quality due to compression artifacts. Values closer to `100` have larger\nfilesizes, but better image quality. Below are four possible qualities (200x200 cover) to visually\ncompare the balance between compression and filesize.\n\n| 25%                                             | 50%                                             | 75%                                             | 100%                                               |\n| ----------------------------------------------- | ----------------------------------------------- | ----------------------------------------------- | -------------------------------------------------- |\n| ![25%](../assets/200-200-cover-25.jpg)<br>_4KB_ | ![50%](../assets/200-200-cover-50.jpg)<br>_6KB_ | ![75%](../assets/200-200-cover-75.jpg)<br>_8KB_ | ![100%](../assets/200-200-cover-100.jpg)<br>_38KB_ |\n'}}]);