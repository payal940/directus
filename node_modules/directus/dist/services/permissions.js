"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsService = void 0;
const items_1 = require("../services/items");
class PermissionsService extends items_1.ItemsService {
    constructor(options) {
        super('directus_permissions', options);
    }
    getAllowedCollections(role, action) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = this.knex.select('collection').from('directus_permissions').where({ role, action });
            const results = yield query;
            return results.map((result) => result.collection);
        });
    }
    getAllowedFields(role, action, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = this.knex.select('collection', 'fields').from('directus_permissions').where({ role, action });
            if (collection) {
                query.andWhere({ collection });
            }
            const results = yield query;
            const fieldsPerCollection = {};
            for (const result of results) {
                const { collection, fields } = result;
                if (!fieldsPerCollection[collection])
                    fieldsPerCollection[collection] = [];
                fieldsPerCollection[collection].push(...(fields || '').split(','));
            }
            return fieldsPerCollection;
        });
    }
}
exports.PermissionsService = PermissionsService;
