(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0ddc2a"],{8381:function(e,n,t){"use strict";t.r(n),n["default"]="# Creating a Custom API Endpoint\n\n> Custom API Endpoints allow you to extend the core functionality of the platform's API.\n\n## 1. Setup the Boilerplate\n\nCustom endpoints are dynamically loaded from within your project's `/extensions/endpoints` folder.\nKeep in mind that the extensions directory is configurable within your env file, and may be located\nelsewhere.\n\nEach endpoint is registered using a registration function within a scoped directory. For example, to\ncreate a custom `/custom/my-endpoint/` endpoint, you would add the following function to\n`/extensions/endpoints/my-endpoint/index.js`.\n\n```js\nmodule.exports = function registerEndpoint(router) {\n\trouter.get('/', (req, res) => res.send('Hello, World!'));\n};\n```\n\nYou can also create several scoped endpoints within a single function:\n\n```js\n// /custom/my-endpoint/\n// /custom/my-endpoint/intro\n// /custom/my-endpoint/goodbye\nmodule.exports = function registerEndpoint(router) {\n\trouter.get('/', (req, res) => res.send('Hello, World!')),\n\t\trouter.get('/intro', (req, res) => res.send('Nice to meet you.')),\n\t\trouter.get('/goodbye', (req, res) => res.send('Goodbye!'));\n};\n```\n\n## 2. Develop your Custom Endpoint\n\nThe `registerEndpoint` function receives two parameters: `router` and `context`. Router is an\nexpress Router instance that is scoped to `/custom/<extension-name>`, while `context` holds the\nfollowing properties:\n\n-   `services` — All API interal services.\n-   `exceptions` — API exception objects that can be used to throw \"proper\" errors.\n-   `database` — Knex instance that is connected to the current database.\n-   `env` — Parsed environment variables.\n\n## 3. Restart the API\n\nTo deploy your endpoint, simply restart the API by running:\n\n```bash\nnpx directus start\n```\n\n---\n\n## Full Example:\n\n```js\n// extensions/endpoints/recipes/index.js\n\nmodule.exports = function registerEndpoint(router, { services, exceptions }) {\n\tconst { ItemsService } = services;\n\tconst { ServiceUnavailableException } = exceptions;\n\n\trouter.get('/', (req, res) => {\n\t\tconst recipeService = new ItemsService('recipes', { schema: req.schema });\n\t\trecipeService\n\t\t\t.readByQuery({ sort: 'name', fields: '*' })\n\t\t\t.then((results) => res.json(results))\n\t\t\t.catch((error) => {\n\t\t\t\tthrow new ServiceUnavailableException(error.message);\n\t\t\t});\n\t});\n};\n```\n"}}]);