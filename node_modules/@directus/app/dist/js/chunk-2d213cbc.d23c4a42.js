(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d213cbc"],{adcf:function(n,e,o){"use strict";o.r(e),e["default"]="# AWS\n\nWhile there are many different ways to run Directus on AWS, from single EC2 instances to a full ELB\nload-balanced configuration, we like the following combination of services:\n\n-   Elastic Beanstalk (EB)\n    -   Elastic Load-Balancer (ELB)\n    -   Elastic Compute Cloud (EC2)\n-   CodeDeploy\n-   Simple Storage Service (S3)\n-   Relational Database Service (RDS) (Aurora)\n-   CloudFront\n-   Route 53\n\n## Elastic Beanstalk\n\nWill run Directus in an autoscaling environment with a load balancer. Makes sure the instances stay\nalive, and will replace individual instances in case of unexpected crashes.\n\nWe recommend setting up a repo in GitHub (or another Git provider) and configuring it using\n[our manual installation flow](/guides/installation/aws). This allows you to later hook up the repo\nto your Elastic Beanstalk instance through CodeDeploy.\n\nSee\n[Deploying Node.js applications to Elastic Beanstalk](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html)\nfor more information.\n\nDirectus' configuration is all set through environment variables. For a full overview of all\navailable environment variables, see [Environment Variables](/reference/environment-variables)\n\n## CodeDeploy\n\nAllows you to automatically deploy updates to your Directus instance or extensions to Elastic\nBeanstalk.\n\nSee\n[Automatically Deploy from GitHub Using AWS CodeDeploy](https://aws.amazon.com/blogs/devops/automatically-deploy-from-github-using-aws-codedeploy/)\nfor more information.\n\n## Simple Storage Service (S3)\n\nIdeal place to store files uploaded to Directus. Your bucket doesn't have to be publicly accessible\nto the web; Directus will stream files from and to the bucket in its /asset endpoint.\n\nSee [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html) for\nmore information.\n\n## Relational Database Service (RDS) (Aurora)\n\nWhile you can technically use any of the SQL based databases offered in AWS, we like to use Aurora.\nIt's auto-scaling and use-based costs have worked out pretty well for us in the past.\n\n## CloudFront\n\nWhile it's not a technical requirement, it's not a bad idea to configure a CloudFront instance in\nfront of your EB environment. This protects you from DDoS attacks and allows you to cache repeated\ncalls to assets in its CDN.\n\nSee\n[Using Elastic Beanstalk with Amazon CloudFront](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.cloudfront.html)\nfor more information.\n\n## Route 53\n\nThe last piece of this puzzle is to assign a domain name to your CloudFront instance. You can use\nRoute 53 for this purpose.\n\nSee\n[Routing traffic to an Amazon CloudFront web distribution by using your domain name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)\nfor more information.\n"}}]);