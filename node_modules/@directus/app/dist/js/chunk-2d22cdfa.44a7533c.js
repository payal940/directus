(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22cdfa"],{f4a7:function(n,e,t){"use strict";t.r(e),e["default"]="# Create a Custom Layout\n\n> Custom layouts allow you to create new ways of browsing or viewing data on the Collection Detail\n> page.\n\n## 1. Setup the Boilerplate\n\nEvery layout is a standalone \"package\" that contains at least a metadata file and a Vue component.\nWe recommend using the following file structure:\n\n```\nsrc/\n\tindex.js\n\tlayout.vue\n```\n\n### src/index.js\n\n```js\nimport LayoutComponent from './layout.vue';\n\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\tcomponent: LayoutComponent,\n};\n```\n\n-   `id` — The unique key for this layout. It is good practice to scope proprietary layouts with an\n    author prefix.\n-   `name` — The human-readable name for this layout.\n-   `component` — A reference to your Vue component.\n\n\x3c!-- prettier-ignore-start --\x3e\n::: tip\nSee\n[the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/layouts/types.ts#L4-L9)\nfor more info on what can go into this object.\n:::\n\x3c!-- prettier-ignore-end --\x3e\n\n### src/layout.vue\n\n```vue\n<template>\n\t<div>My Custom Layout</div>\n</template>\n\n<script>\nexport default {};\n<\/script>\n```\n\nThe props you can use in an layout are:\n\n-   `collection` — The current collection's name.\n-   `selection` (sync) - Any currently selected items.\n-   `layout-options` (sync) - The user's current saved layout options.\n-   `layout-query` (sync) - The user's layout query parameters. (eg: sort, limit, etc)\n-   `filters` (sync) - The user's currently active filters.\n-   `search-query` (sync) - The user's current search query.\n\n## 2. Install Dependencies and Configure the Buildchain\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom layouts's Vue component must first be bundled into a single\n`index.js` file. We recommend bundling your code using Rollup. To install this and the other\ndevelopment dependencies, run this command:\n\n```bash\nnpm i -D rollup rollup-plugin-commonjs rollup-plugin-node-resolve rollup-plugin-terser rollup-plugin-vue@5.0.0 @vue/compiler-sfc vue-template-compiler\n```\n\nYou can then use the following Rollup configuration within `rollup.config.js`:\n\n```js\nimport { terser } from 'rollup-plugin-terser';\nimport resolve from 'rollup-plugin-node-resolve';\nimport commonjs from 'rollup-plugin-commonjs';\nimport vue from 'rollup-plugin-vue';\n\nexport default {\n\tinput: 'src/index.js',\n\toutput: {\n\t\tformat: 'es',\n\t\tfile: 'dist/index.js',\n\t},\n\tplugins: [terser(), resolve(), commonjs(), vue()],\n};\n```\n\n## 3. Develop Your Custom Layout\n\nThe layout itself is simply a Vue component, which provides an blank canvas for creating anything\nyou need.\n\n## 4. Build and Deploy\n\nTo build the layout for use within Directus, run:\n\n```bash\nnpx rollup -c\n```\n\nFinally, move the output from your layout's `dist` folder into your project's `/extensions/layouts`\nfolder. Keep in mind that the extensions directory is configurable within your env file, and may be\nlocated elsewhere.\n"}}]);